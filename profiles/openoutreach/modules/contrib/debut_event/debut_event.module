<?php

include_once('debut_event.features.inc');

/**
 * Implements hook_init().
 */
function debut_event_init() {
  drupal_add_css(drupal_get_path('module', 'debut_event') . '/debut_event.css');
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Add an action link to 'node/add/event' on 'event' page.
 */
function debut_event_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'event') {
    $item = menu_get_item('node/add/event');
    if ($item['access']) {
      $item['title'] = t('Add a new event');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_date_format_types().
 */
function debut_event_date_format_types() {
  return array(
    'event_day' => t('Day'),
    'event_time' => t('Time'),
  );
}

/**
 * Implements hook_date_formats().
 */
function debut_event_date_formats() {
  $condensed = array(
    'event_day' => array(
      'l, M j',
      'l, j M',
    ),
    'event_time' => array(
      'g:ia',
      'H:i',
    ),
  );
  $formats = array();
  foreach ($condensed as $type => $f) {
    foreach ($f as $format) {
      $formats[] = array(
        'type' => $type,
        'format' => $format,
        'locales' => array(),
      );
    }
  }
  return $formats;
}

/**
 * Implements hook_field_default_fields_alter().
 *
 * If debut_media module is present, use an image style it provides instead of
 * the default 'large' style. Also alter fields to add ical view mode.
 */
function debut_event_field_default_fields_alter(&$fields) {
  // Todo: the call to apps_compatible_feature_is_recreating doesn't work with
  // pseudo exportables like fields.
  if (isset($fields['node-event-field_content_image']) && module_exists('debut_media') && !apps_compatible_feature_is_recreating('debut_event')) {
    $fields['node-event-field_content_image']['field_instance']['display']['default']['settings']['image_style'] = 'medium_large';
  }
  // Prevent meaningless overrides by adding ical view mode display settings.
  foreach ($fields as $key => $field) {
    if (!isset($field['field_instance']['display']['ical'])) {
      $fields[$key]['field_instance']['display']['ical'] = array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      );
    }
  }
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Add coloring for any taxonomy terms added to the event_type vocabulary.
 */
function debut_event_views_default_views_alter(&$views) {
  if (isset($views['event_calendar'])) {
    module_load_include('inc', 'apps_compatible', 'apps_compatible.alter');
    apps_compatible_calendar_view_colorize_by_term($views['event_calendar'], 'event_type', 'field_event_type');
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Invalidate the views cache when a taxonomy term is inserted into the
 * event_type vocabulary so that coloring will work.
 */
function debut_event_entity_insert($entity, $type) {
  if ($type == 'taxonomy_term' && $entity->vocabulary_machine_name == 'event_type') {
    views_invalidate_cache();
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Invalidate the views cache when a taxonomy term is deleted from the
 * event_type vocabulary so that coloring will work.
 */
function debut_event_entity_delete($entity, $type) {
  if ($type == 'taxonomy_term' && $entity->vocabulary_machine_name == 'event_type') {
    views_invalidate_cache();
  }
}

