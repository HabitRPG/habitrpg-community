<?php

include_once('debut_blog.features.inc');

/**
 * Implements hook_init().
 */
function debut_blog_init() {
  drupal_add_css(drupal_get_path('module', 'debut_blog') . '/debut_blog.css');
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Add an action link to 'node/add/blog' on 'blog' page.
 */
function debut_blog_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'blog') {
    $item = menu_get_item('node/add/blog');
    if ($item['access']) {
      $item['title'] = t('Add a new blog post');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_user_view().
 */
function debut_blog_user_view($account) {
  if (user_access('create blog content', $account)) {
    $account->content['summary']['blog'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Blog'),
      // l() escapes the attributes, so we should not escape !username here.
      '#markup' => l(t('View recent blog entries'), "blog/$account->uid", array('attributes' => array('title' => t("Read !username's latest blog entries.", array('!username' => format_username($account)))))),
      '#attributes' => array('class' => array('blog')),
    );
  }
}

/**
 * Implements hook_node_view().
 */
function debut_blog_node_view($node, $view_mode) {
  if ($view_mode != 'rss') {
    if ($node->type == 'blog' && (arg(0) != 'blog' || arg(1) != $node->uid)) {
      // This goes to l(), which escapes !username in both title and attributes.
      $links['blog_usernames_blog'] = array(
        'title' => t("!username's blog", array('!username' => format_username($node))),
        'href' => "blog/$node->uid",
        'attributes' => array('title' => t("Read !username's latest blog entries.", array('!username' => format_username($node)))),
      );
      $node->content['links']['blog'] = array(
        '#theme' => 'links__node__blog',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_rdf_mapping().
 */
function debut_blog_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'blog',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:BlogPost'),
      ),
    ),
  );
}

/**
 * Implements hook_context_default_contexts_alter().
 *
 * Trigger author bio display for on blog node pages and on the author's blog.
 */
function debut_blog_context_default_contexts_alter(&$items) {
  // Don't alter when recreating/updating the debut_bio feature. This ensures
  // the context exports cleanly.
  if (isset($items['bio_author']) && !apps_compatible_feature_is_recreating('debut_bio')) {
    $items['bio_author']->conditions['node']['values']['blog'] = 'blog';
    $items['bio_author']->conditions['path']['values']['blog/*'] = 'blog/*';
  }
}

/**
 * Implements hook_user_default_permissions_alter().
 *
 * Assign bio releated permissions to blogger role.
 */
function debut_blog_user_default_permissions_alter(&$items) {
  // Don't alter when recreating/updating the debut_bio feature. This ensures
  // the user permissions export cleanly.
  $permissions = array('edit own bio profile', 'view own bio profile');
  foreach ($permissions as $permission) {
    if (isset($items[$permission]) && !apps_compatible_feature_is_recreating('debut_bio')) {
      $items[$permission]['roles'][] = 'blogger';
    }
  }
}

/**
 * Implements hook_field_default_fields_alter().
 *
 * If debut_media module is present, use an image style it provides instead of
 * the default 'large' style.
 */
function debut_blog_field_default_fields_alter(&$fields) {
  if (isset($fields['node-blog-field_content_image']) && module_exists('debut_media') && !apps_compatible_feature_is_recreating('debut_blog')) {
    $fields['node-blog-field_content_image']['field_instance']['display']['default']['settings']['image_style'] = 'medium_large';
  }
}
